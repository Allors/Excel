trigger:
- master
- feature/*

variables:
  buildConfiguration: 'Release'

stages:
- stage: Excel
  jobs:
  - job: Windows
    timeoutInMinutes: 180

    pool:
      vmImage: 'windows-2019'

    strategy:
      matrix:
        Excel32:
          bits: ''
          target: 'CiTest'
        Excel64:
          bits: '/64bit'
          target: 'Ci'
      maxParallel: 2

    steps:
    - task: UseDotNet@2
      displayName: 'Use latest .NET Core 3.1 sdk'
      inputs:
        packageType: sdk
        version: 3.1.x
        installationPath: $(Agent.ToolsDirectory)/dotnet
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          #choco install office365business
          choco install microsoft-office-deployment $(bits)
        failOnStderr: true
      displayName: 'Install Excel'
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $pfxpath = '$(Build.SourcesDirectory)/src/ExcelAddIn.Interop/ExcelAddIn.Interop_TemporaryKey.pfx'
          
          Add-Type -AssemblyName System.Security
          $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
          $cert.Import($pfxpath, "", [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
          $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
          $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
          $store.Add($cert)
          $store.Close()
        failOnStderr: true
      displayName: 'Add Excel PFX file to the certificate store.'
    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: 'build.ps1'
        arguments: '-configuration $(buildConfiguration) -target $(target)'
        failOnStderr: true
      displayName: 'Build'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'xunit'
        testResultsFiles: '*.xml'
        searchFolder: '$(Build.SourcesDirectory)/artifacts/tests'
      displayName: 'Publish Test results'
    - task: NuGetAuthenticate@0
      displayName: 'NuGet Authenticate'
    - task: NuGetCommand@2
      displayName: 'NuGet push'
      inputs:
        command: push
        packagesToPush: '$(Build.SourcesDirectory)/**/*.nupkg;$(Build.SourcesDirectory)/**/*.snupkg;!$(Build.SourcesDirectory)/**/*.symbols.nupkg'
        publishVstsFeed: 'Excel/Excel'
        allowPackageConflicts: true

